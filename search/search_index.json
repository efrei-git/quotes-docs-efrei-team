{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"contributor3-interface Documentation Programming Quotes quotes-docs-efrei-team Programming Quotes est une petite application qui permet d'afficher des citations humoristiques de programmeurs. Membres du groupe initiateur : Ma\u00ebl Barbe contributeur 1 et 3 : Dharm Pal Singh Harjit contributeur 2 : Farra\u00ef Sofian ======= Documentation Programming Quotes efrei-team Programming Quotes est petite application qui permet d'afficher des citations humouristique de programmeurs. Membres du groupe initiateur : Barbe Ma\u00ebl contributor-1 : Dharm pal Singh Harjit contributor-2 : Farra\u00ef Sofiane main","title":"Home"},{"location":"#documentation-programming-quotes-quotes-docs-efrei-team","text":"Programming Quotes est une petite application qui permet d'afficher des citations humoristiques de programmeurs.","title":"Documentation Programming Quotes quotes-docs-efrei-team"},{"location":"#membres-du-groupe","text":"initiateur : Ma\u00ebl Barbe contributeur 1 et 3 : Dharm Pal Singh Harjit contributeur 2 : Farra\u00ef Sofian =======","title":"Membres du groupe"},{"location":"#documentation-programming-quotes-efrei-team","text":"Programming Quotes est petite application qui permet d'afficher des citations humouristique de programmeurs.","title":"Documentation Programming Quotes efrei-team"},{"location":"#membres-du-groupe_1","text":"initiateur : Barbe Ma\u00ebl contributor-1 : Dharm pal Singh Harjit contributor-2 : Farra\u00ef Sofiane main","title":"Membres du groupe"},{"location":"functions/","text":"Core functions File functions.py load_quotes(filename) ```python def load_quotes(filename): \"\"\" Loads quotes from a file and returns them as a list. Parameters: filename (str): The path to the file containing quotes. The function reads the file line by line, strips whitespace, and appends non-empty lines to a list. Each line in the file should contain one quote. Returns: list: A list of quotes loaded from the file. Example: load_quotes('quotes.txt') This function reads the file 'quotes.txt' and returns a list of quotes. \"\"\" quotes = [] with open(filename, 'r') as file: lines = file.readlines() for line in lines: line = line.strip() if line: quotes.append(line) return quotes def random_quote(quotes): \"\"\" Returns a random quote from the provided list of quotes. Parameters: quotes (list): A list of quotes from which a random quote will be selected. The function uses the random.choice() method to select a random quote. Returns: str: A randomly selected quote from the list. Example: random_quote(['Quote 1', 'Quote 2', 'Quote 3']) This function returns a random quote from the provided list. \"\"\" random_quote = random.choice(quotes) return random_quote def print_quote(quote): \"\"\" Prints a single quote to the console. Parameters: quote (str): The quote to be printed. The function formats the quote with asterisks and prints it to the console. Returns: None Example: print_quote('This is a quote.') \"\"\" print(quote) def view_quotes(quotes): \"\"\" Prints all quotes in the provided list to the console. Parameters: quotes (list): A list of quotes to be printed. The function iterates through the list and prints each quote using the Returns: None Example: view_quotes(['Quote 1', 'Quote 2', 'Quote 3']) This function prints each quote in the provided list. \"\"\" for quote in quotes: print_quote(quote) def add_quote(quotes, filename): \"\"\" Adds a new quote to the list of quotes and appends it to a file. Parameters: quotes (list): A list of existing quotes to which the new quote will be added. filename (str): The path to the file where the new quote will be appended. The function prompts the user to input a new quote, appends it to the provided list of quotes, and writes it to the specified file. Each quote is written on a new line in the file. Returns: None Example: add_quote(['Quote 1', 'Quote 2'], 'quotes.txt') \"\"\" new_quote = input(\"Enter a new quote: \") quotes.append(new_quote) with open(filename, 'a') as file: file.write(new_quote) file.write('\\n') print(\"Quote added successfully!\") def display_quotes(quotes, count): \"\"\" Displays a specified number of quotes from the provided list. Parameters: quotes (list): A list of quotes to be displayed. count (int): The number of quotes to display. If count is greater than the length of the list, all quotes will be displayed. The function checks if the count is valid and prints the specified number of quotes. If the count exceeds the number of available quotes, it prints all quotes. Returns: None Example: display_quotes(['Quote 1', 'Quote 2', 'Quote 3'], 2) This function prints the first 2 quotes from the provided list. \"\"\" if count >= len(quotes): print(\"All Quotes:\") view_quotes(quotes) else: print(f\"First {count} Quotes:\") for i in range(count): print_quote(quotes[i])","title":"Functions"},{"location":"functions/#core-functions","text":"","title":"Core functions"},{"location":"functions/#file-functionspy","text":"","title":"File functions.py"},{"location":"functions/#load_quotesfilename","text":"```python def load_quotes(filename): \"\"\" Loads quotes from a file and returns them as a list. Parameters: filename (str): The path to the file containing quotes. The function reads the file line by line, strips whitespace, and appends non-empty lines to a list. Each line in the file should contain one quote. Returns: list: A list of quotes loaded from the file. Example: load_quotes('quotes.txt') This function reads the file 'quotes.txt' and returns a list of quotes. \"\"\" quotes = [] with open(filename, 'r') as file: lines = file.readlines() for line in lines: line = line.strip() if line: quotes.append(line) return quotes def random_quote(quotes): \"\"\" Returns a random quote from the provided list of quotes. Parameters: quotes (list): A list of quotes from which a random quote will be selected. The function uses the random.choice() method to select a random quote. Returns: str: A randomly selected quote from the list. Example: random_quote(['Quote 1', 'Quote 2', 'Quote 3']) This function returns a random quote from the provided list. \"\"\" random_quote = random.choice(quotes) return random_quote def print_quote(quote): \"\"\" Prints a single quote to the console. Parameters: quote (str): The quote to be printed. The function formats the quote with asterisks and prints it to the console. Returns: None Example: print_quote('This is a quote.') \"\"\" print(quote) def view_quotes(quotes): \"\"\" Prints all quotes in the provided list to the console. Parameters: quotes (list): A list of quotes to be printed. The function iterates through the list and prints each quote using the Returns: None Example: view_quotes(['Quote 1', 'Quote 2', 'Quote 3']) This function prints each quote in the provided list. \"\"\" for quote in quotes: print_quote(quote) def add_quote(quotes, filename): \"\"\" Adds a new quote to the list of quotes and appends it to a file. Parameters: quotes (list): A list of existing quotes to which the new quote will be added. filename (str): The path to the file where the new quote will be appended. The function prompts the user to input a new quote, appends it to the provided list of quotes, and writes it to the specified file. Each quote is written on a new line in the file. Returns: None Example: add_quote(['Quote 1', 'Quote 2'], 'quotes.txt') \"\"\" new_quote = input(\"Enter a new quote: \") quotes.append(new_quote) with open(filename, 'a') as file: file.write(new_quote) file.write('\\n') print(\"Quote added successfully!\") def display_quotes(quotes, count): \"\"\" Displays a specified number of quotes from the provided list. Parameters: quotes (list): A list of quotes to be displayed. count (int): The number of quotes to display. If count is greater than the length of the list, all quotes will be displayed. The function checks if the count is valid and prints the specified number of quotes. If the count exceeds the number of available quotes, it prints all quotes. Returns: None Example: display_quotes(['Quote 1', 'Quote 2', 'Quote 3'], 2) This function prints the first 2 quotes from the provided list. \"\"\" if count >= len(quotes): print(\"All Quotes:\") view_quotes(quotes) else: print(f\"First {count} Quotes:\") for i in range(count): print_quote(quotes[i])","title":"load_quotes(filename)"},{"location":"user-interface/","text":"Interface File main.py menu() ```python def menu(): \"\"\" Displays the menu options for the user. The menu includes options to display a random quote, display a specified number of quotes, add a new quote, and exit the program. Returns: None \"\"\" print(\"\\n==== Programming Quotes ====\") print(\"random : Random quote\") print(\"display : Display quotes\") print(\"add : Add a new quote\") print(\"exit : Exit the program\") def main(): \"\"\" Main function to run the program. It loads quotes from a file, displays the menu, and processes user input to perform actions based on the user's choice. Returns: None \"\"\" while True: quotes = load_quotes(\"quotes.txt\") menu() choice = input(\">> \") if choice == \"random\": print_quote(random_quote(quotes)) elif choice == \"display\": count = int(input(\"Enter the number of quotes to display: \")) display_quotes(quotes, count) elif choice == \"add\": add_quote(quotes, \"quotes.txt\") elif choice == \"exit\": print(\"Good bye...\") break else: print(\"Invalid input\")","title":"User interface"},{"location":"user-interface/#interface","text":"","title":"Interface"},{"location":"user-interface/#file-mainpy","text":"","title":"File main.py"},{"location":"user-interface/#menu","text":"```python def menu(): \"\"\" Displays the menu options for the user. The menu includes options to display a random quote, display a specified number of quotes, add a new quote, and exit the program. Returns: None \"\"\" print(\"\\n==== Programming Quotes ====\") print(\"random : Random quote\") print(\"display : Display quotes\") print(\"add : Add a new quote\") print(\"exit : Exit the program\") def main(): \"\"\" Main function to run the program. It loads quotes from a file, displays the menu, and processes user input to perform actions based on the user's choice. Returns: None \"\"\" while True: quotes = load_quotes(\"quotes.txt\") menu() choice = input(\">> \") if choice == \"random\": print_quote(random_quote(quotes)) elif choice == \"display\": count = int(input(\"Enter the number of quotes to display: \")) display_quotes(quotes, count) elif choice == \"add\": add_quote(quotes, \"quotes.txt\") elif choice == \"exit\": print(\"Good bye...\") break else: print(\"Invalid input\")","title":"menu()"},{"location":"features/features/","text":"","title":"Features"},{"location":"features/functions/","text":"","title":"Core Functions"},{"location":"features/user-interface/","text":"","title":"User Interface"},{"location":"logs/log-initiateur/","text":"Log Initiateur * ff80777 (origin/gh-pages, gh-pages) Deployed 61936e9 with MkDocs version: 1.6.1 * 2698588 Deployed 61936e9 with MkDocs version: 1.6.1 * feb86f2 Deployed 61936e9 with MkDocs version: 1.6.1 * bed0423 Deployed 61936e9 with MkDocs version: 1.6.1 * 61936e9 (HEAD -> refactoring, origin/main, origin/HEAD, main) Initial Commit * 00311ed add deadline","title":"Initiateur"},{"location":"logs/log-initiateur/#log-initiateur","text":"* ff80777 (origin/gh-pages, gh-pages) Deployed 61936e9 with MkDocs version: 1.6.1 * 2698588 Deployed 61936e9 with MkDocs version: 1.6.1 * feb86f2 Deployed 61936e9 with MkDocs version: 1.6.1 * bed0423 Deployed 61936e9 with MkDocs version: 1.6.1 * 61936e9 (HEAD -> refactoring, origin/main, origin/HEAD, main) Initial Commit * 00311ed add deadline","title":"Log Initiateur"}]}